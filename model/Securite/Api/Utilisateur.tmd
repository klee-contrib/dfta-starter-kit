---
module: Securite
tags:
  - back
  - front
uses:
  - decorators
  - Securite/Commands/Utilisateur
  - Securite/Data/Utilisateur
  - Securite/Queries/Utilisateur

---
endpoint:
  name: AddUtilisateur
  method: POST
  route: api/utilisateurs
  description: Ajoute un utilisateur
  decorators:
    - Security: ["hasRole('CREATE')"]
  params:
    - composition: UtilisateurWrite
      comment: Utilisateur à sauvegarder
      name: utilisateur
  returns:
    composition: UtilisateurRead
    name: utilisateurList # Le nom est obligatoire car c'est une propriété mais il n'est pas utilisé.
    comment: Utilisateur sauvegardé
---
endpoint:
  name: DeleteUtilisateur
  method: DELETE
  route: api/utilisateurs/{utiId}
  description: Supprime un utilisateur
  decorators:
    - Security: ["hasRole('DELETE')"]
  params:
    - alias:
        class: Utilisateur
        property: Id
---
endpoint:
  name: GetUtilisateur
  method: GET
  route: api/utilisateurs/{utiId}
  description: Charge le détail d'un utilisateur
  decorators:
    - Security: ["hasRole('READ')"]
  # Liste des paramètres du endpoint. Ce sont des propriétés de modèle comme pour les classes. Il peut ne pas y en avoir.
  params:
    - alias:
        class: Utilisateur
        property: Id
  # Type de retour du endpoint. La aussi, c'est une propriété du modèle et il peut ne pas y en avoir.
  returns:
    composition: UtilisateurRead
    name: detail # Le nom est obligatoire car c'est une propriété mais il n'est pas utilisé.
    comment: Le détail de l'utilisateur
---
endpoint:
  name: SearchUtilisateur
  method: GET
  route: api/utilisateurs
  description: Recherche des utilisateurs
  decorators:
    - Security: ["hasRole('READ')"]
  params:
    - alias:
        class: Utilisateur
        exclude:
          - Id
          - DateCreation
          - DateModification
      defaultValue: null
  returns:
    composition: UtilisateurItem
    name: utilisateurList
    domain: DO_LISTE
    comment: Utilisateurs matchant les critères
---
endpoint:
  name: UpdateUtilisateur
  method: PUT
  route: api/utilisateurs/{utiId}
  description: Sauvegarde un utilisateur
  decorators:
    - Security: ["hasRole('UPDATE')"]
  params:
    - alias:
        class: Utilisateur
        property: Id
    - composition: UtilisateurWrite
      comment: Utilisateur à sauvegarder
      name: utilisateur
  returns:
    composition: UtilisateurRead
    name: utilisateurList # Le nom est obligatoire car c'est une propriété mais il n'est pas utilisé.
    comment: Utilisateur sauvegardé
