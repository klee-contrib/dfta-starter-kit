// <auto-generated />
using System;
using KleeContrib.Dfta.Clients.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KleeContrib.Dfta.Migrations.Migrations
{
    [DbContext(typeof(KleeContribDftaDbContext))]
    partial class KleeContribDftaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KleeContrib.Dfta.Clients.Db.Securite.Models.DroitProfil", b =>
                {
                    b.Property<string>("DroitCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("dro_code");

                    b.Property<int>("ProfilId")
                        .HasColumnType("integer")
                        .HasColumnName("pro_id");

                    b.HasKey("DroitCode", "ProfilId");

                    b.HasIndex("ProfilId");

                    b.ToTable("droit_profils");

                    b.HasData(
                        new
                        {
                            DroitCode = "CREATE",
                            ProfilId = 1
                        },
                        new
                        {
                            DroitCode = "READ",
                            ProfilId = 2
                        },
                        new
                        {
                            DroitCode = "UPDATE",
                            ProfilId = 3
                        },
                        new
                        {
                            DroitCode = "DELETE",
                            ProfilId = 4
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Clients.Db.Securite.Models.Profil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pro_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pro_date_creation");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("pro_date_modification");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("pro_libelle");

                    b.HasKey("Id");

                    b.ToTable("profils");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3860),
                            Libelle = "Profil 1"
                        },
                        new
                        {
                            Id = 2,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3861),
                            Libelle = "Profil 2"
                        },
                        new
                        {
                            Id = 3,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3862),
                            Libelle = "Profil 3"
                        },
                        new
                        {
                            Id = 4,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3863),
                            Libelle = "Profil 4"
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Clients.Db.Securite.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("uti_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Actif")
                        .HasColumnType("boolean")
                        .HasColumnName("uti_actif");

                    b.Property<string>("Adresse")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uti_adresse");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uti_date_creation");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uti_date_modification");

                    b.Property<DateOnly?>("DateNaissance")
                        .HasColumnType("date")
                        .HasColumnName("uti_date_naissance");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uti_email");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uti_nom");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("uti_prenom");

                    b.Property<int>("ProfilId")
                        .HasColumnType("integer")
                        .HasColumnName("pro_id");

                    b.Property<string>("TypeUtilisateurCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tut_code");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ProfilId");

                    b.HasIndex("TypeUtilisateurCode");

                    b.ToTable("utilisateurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3928),
                            Email = "test1@test.com",
                            Nom = "Jean",
                            Prenom = "Michel",
                            ProfilId = 1,
                            TypeUtilisateurCode = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3931),
                            Email = "test2@test.com",
                            Nom = "Gerard",
                            Prenom = "Jugnos",
                            ProfilId = 2,
                            TypeUtilisateurCode = "GEST"
                        },
                        new
                        {
                            Id = 3,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3933),
                            Email = "test3@test.com",
                            Nom = "Gad",
                            Prenom = "El",
                            ProfilId = 3,
                            TypeUtilisateurCode = "CLIENT"
                        },
                        new
                        {
                            Id = 4,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3935),
                            Email = "test4@test.com",
                            Nom = "Bernard",
                            Prenom = "Bruno",
                            ProfilId = 4,
                            TypeUtilisateurCode = "ADMIN"
                        },
                        new
                        {
                            Id = 5,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3937),
                            Email = "test5@test.com",
                            Nom = "Sisi",
                            Prenom = "Brindacier",
                            ProfilId = 1,
                            TypeUtilisateurCode = "GEST"
                        },
                        new
                        {
                            Id = 6,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3938),
                            Email = "test6@test.com",
                            Nom = "Bibi",
                            Prenom = "Baba",
                            ProfilId = 2,
                            TypeUtilisateurCode = "CLIENT"
                        },
                        new
                        {
                            Id = 7,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3940),
                            Email = "test7@test.com",
                            Nom = "Dédé",
                            Prenom = "Dédé",
                            ProfilId = 3,
                            TypeUtilisateurCode = "GEST"
                        },
                        new
                        {
                            Id = 8,
                            Actif = true,
                            DateCreation = new DateTime(2024, 7, 5, 20, 3, 31, 898, DateTimeKind.Utc).AddTicks(3942),
                            Email = "test8@test.com",
                            Nom = "Ran",
                            Prenom = "Tanplan",
                            ProfilId = 4,
                            TypeUtilisateurCode = "ADMIN"
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Common.References.Securite.Droit", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("dro_code");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("dro_libelle");

                    b.Property<string>("TypeDroitCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tdr_code");

                    b.HasKey("Code");

                    b.HasIndex("TypeDroitCode");

                    b.ToTable("droits");

                    b.HasData(
                        new
                        {
                            Code = "CREATE",
                            Libelle = "Création",
                            TypeDroitCode = "WRITE"
                        },
                        new
                        {
                            Code = "READ",
                            Libelle = "Lecture",
                            TypeDroitCode = "READ"
                        },
                        new
                        {
                            Code = "UPDATE",
                            Libelle = "Mise à jour",
                            TypeDroitCode = "WRITE"
                        },
                        new
                        {
                            Code = "DELETE",
                            Libelle = "Suppression",
                            TypeDroitCode = "ADMIN"
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Common.References.Securite.TypeDroit", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tdr_code");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tdr_libelle");

                    b.HasKey("Code");

                    b.ToTable("type_droits");

                    b.HasData(
                        new
                        {
                            Code = "READ",
                            Libelle = "Lecture"
                        },
                        new
                        {
                            Code = "WRITE",
                            Libelle = "Ecriture"
                        },
                        new
                        {
                            Code = "ADMIN",
                            Libelle = "Administration"
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Common.References.Securite.TypeUtilisateur", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("tut_code");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tut_libelle");

                    b.HasKey("Code");

                    b.ToTable("type_utilisateurs");

                    b.HasData(
                        new
                        {
                            Code = "ADMIN",
                            Libelle = "Administrateur"
                        },
                        new
                        {
                            Code = "GEST",
                            Libelle = "Gestionnaire"
                        },
                        new
                        {
                            Code = "CLIENT",
                            Libelle = "Client"
                        });
                });

            modelBuilder.Entity("KleeContrib.Dfta.Clients.Db.Securite.Models.DroitProfil", b =>
                {
                    b.HasOne("KleeContrib.Dfta.Common.References.Securite.Droit", null)
                        .WithMany()
                        .HasForeignKey("DroitCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KleeContrib.Dfta.Clients.Db.Securite.Models.Profil", null)
                        .WithMany()
                        .HasForeignKey("ProfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KleeContrib.Dfta.Clients.Db.Securite.Models.Utilisateur", b =>
                {
                    b.HasOne("KleeContrib.Dfta.Clients.Db.Securite.Models.Profil", null)
                        .WithMany()
                        .HasForeignKey("ProfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KleeContrib.Dfta.Common.References.Securite.TypeUtilisateur", null)
                        .WithMany()
                        .HasForeignKey("TypeUtilisateurCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KleeContrib.Dfta.Common.References.Securite.Droit", b =>
                {
                    b.HasOne("KleeContrib.Dfta.Common.References.Securite.TypeDroit", null)
                        .WithMany()
                        .HasForeignKey("TypeDroitCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
